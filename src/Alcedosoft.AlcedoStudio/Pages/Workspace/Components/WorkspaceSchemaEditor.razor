<MudDataGrid T="FileSchemaItem"
             Items="@Schema.Items"
             Dense="true"
             ReadOnly="false"
             SortMode="SortMode.None"
             EditMode="DataGridEditMode.Cell"
             EditTrigger="DataGridEditTrigger.OnRowClick"
             CommittedItemChanges="OnItemChanged">
    <Columns>
        <Column T="FileSchemaItem" Field="@nameof(FileSchemaItem.Name)" />
        <Column T="FileSchemaItem" Field="@nameof(FileSchemaItem.Type)">
            <EditTemplate>
                <MudSelect T="string"
                           Value="context.Item.Type"
                           ValueChanged="type => OnTypeChanged(context, type)">
                    <MudSelectItem Value="@("string")">string</MudSelectItem>
                    <MudSelectItem Value="@("int")">int</MudSelectItem>
                    <MudSelectItem Value="@("bool")">bool</MudSelectItem>
                    <MudSelectItem Value="@("long")">long</MudSelectItem>
                    <MudSelectItem Value="@("float")">float</MudSelectItem>
                    <MudSelectItem Value="@("double")">double</MudSelectItem>
                    <MudSelectItem Value="@("DateTime")">DateTime</MudSelectItem>
                </MudSelect>
            </EditTemplate>
        </Column>
        <Column T="FileSchemaItem" Field="@nameof(FileSchemaItem.DisplayName)" />
        <Column T="FileSchemaItem" Field="@nameof(FileSchemaItem.Description)" />
        <Column T="FileSchemaItem" IsEditable="false">
            <HeaderTemplate>
                <MudIconButton Icon="@Icons.Filled.Add" Color="Color.Tertiary" OnClick="CreateItem" />
            </HeaderTemplate>
            <CellTemplate>
                <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error" OnClick="x => DeleteItem(context.Item)" />
            </CellTemplate>
        </Column>
    </Columns>
</MudDataGrid>

@code {
    private readonly SchemaHandler _handler = new();

    [Inject] public ISnackbar Snackbar { get; set; } = null!;
    [Inject] public IDialogService DialogService { get; set; } = null!;
    [Parameter] public FileSchema Schema { get; set; } = null!;

    public void CreateItem()
    {
        this.Schema.Items.Add(new()
            {
                Name = "Field1",
                Type = "string",
                DisplayName = "Field1",
                Description = "Field1",
            });

        this.Snackbar.Add("Item Created", Severity.Success);
    }

    public async Task DeleteItem(FileSchemaItem item)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete",
            cancelText: "Cancel");

        if (result is true)
        {
            Schema.Items.Remove(item);

            this.Snackbar.Add("Item Deleted", Severity.Success);
        }
    }

    public async Task OnTypeChanged(CellContext<FileSchemaItem> context, string type)
    {
        context.Item.Type = type;

        context.Actions.CancelEditingItem();

        await this.OnItemChanged();
    }

    public async Task OnItemChanged()
    {
        this.Snackbar.Add("Item Updated", Severity.Success);

        await _handler.SaveAsync(this.Schema);
    }
}